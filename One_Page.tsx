/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/Models/New/One_Page.glb --types 
*/

import * as THREE from "three";
import React, { useEffect, useRef } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useFrame, useThree } from "@react-three/fiber";

type GLTFResult = GLTF & {
  nodes: {
    Plane: THREE.Mesh;
    Plane_1: THREE.Mesh;
  };
  materials: {
    ["Opaline Paper"]: THREE.MeshStandardMaterial;
    White: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

type ActionName = "KeyAction";
interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}
type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
>;

export function One_Page(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>(null);
  const group2 = useRef<THREE.Group>(null);
  const { nodes, materials, animations } = useGLTF(
    "/Models/New/One_Page.glb"
  ) as GLTFResult;
  const { actions } = useAnimations(animations, group);
  const { scene } = useThree();
  console.log(animations);
  useEffect(() => {
    new Array(8).fill(0).map((v, index) => {
      const page = nodes.Plane.clone();
      page.morphTargetDictionary = nodes.Plane.morphTargetDictionary;
      page.morphTargetInfluences = nodes.Plane.morphTargetInfluences;
      page.name = "Plane";
      page.position.set(0, 0.005 * index, 0);
      const mixer = new THREE.AnimationMixer(page);
      const a = animations[0].clone();
      a.tracks.splice(1, 1);
      const action = mixer.clipAction(a);
      action?.setLoop(THREE.LoopRepeat, 10);
      group2.current?.add(page);
      console.log(index);
      action.play().reset();
    });
  }, []);
  // useEffect(() => {
  //   // actions.KeyAction?.setLoop(THREE.LoopRepeat, 10);
  //   // actions.KeyAction?.play().startAt(1).reset();
  //   const mixer = new THREE.AnimationMixer(nodes.Plane);
  //   const action = mixer.clipAction(animations[0]);
  //   action?.setLoop(THREE.LoopRepeat, 10);
  //   // group2.current?.add(page);
  //   action.play().reset();
  // }, []);

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group ref={group2} name="Pages_000">
          {/* <mesh name="Plane" geometry={nodes.Plane.geometry} material={materials['Opaline Paper']} />
          <mesh name="Plane_1" geometry={nodes.Plane_1.geometry} material={materials.White} /> */}
          {/* {[...Array(4)].map((_, index) => (
            <mesh
              key={index}
              castShadow
              name={"Plane"}
              position={[0, 0.005 * index, 0]}
              geometry={nodes.Plane.geometry}
              material={materials["Opaline Paper"]}
              morphTargetDictionary={nodes.Plane.morphTargetDictionary}
              morphTargetInfluences={nodes.Plane.morphTargetInfluences}
            />
          ))} */}
        </group>
      </group>
    </group>
  );
}
