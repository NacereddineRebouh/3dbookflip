/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/Models/New/Book2.glb --types 
*/

import * as THREE from "three";
import React, { useEffect, useRef } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    Book001: THREE.Mesh;
  };
  materials: {};
  animations: GLTFAction[];
};

type ActionName = "Key.001Action";
interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}
type propsBook = JSX.IntrinsicElements["group"] & {
  DiffuseMap: THREE.Texture;
  RoughnessMap: THREE.Texture;
  NormalMap: THREE.Texture;
  StartAnimation: boolean;
  ImagesReady: boolean;
};

export function Book(props: propsBook) {
  const group = useRef<THREE.Group>(null);
  const { nodes, materials, animations } = useGLTF(
    "/Models/New/Book2.glb"
  ) as GLTFResult;
  const { actions } = useAnimations(animations, group);

  props.DiffuseMap.flipY = false;
  const material = new THREE.MeshStandardMaterial();
  material.map = props.DiffuseMap;
  material.roughnessMap = props.RoughnessMap;
  material.normalMap = props.NormalMap;
  nodes.Book001.geometry.computeVertexNormals();

  useEffect(() => {
    if (props.StartAnimation) {
      Object.entries(actions).map(([key, value]) => {
        value?.setLoop(THREE.LoopOnce, 0);
        value?.play().reset();
      });
    }
  }, [props.StartAnimation]);

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <mesh
          name="Book001"
          geometry={nodes.Book001.geometry}
          material={material}
          morphTargetDictionary={nodes.Book001.morphTargetDictionary}
          morphTargetInfluences={nodes.Book001.morphTargetInfluences}
        />
      </group>
    </group>
  );
}

//useGLTF.preload("/Models/New/Book2.glb");
