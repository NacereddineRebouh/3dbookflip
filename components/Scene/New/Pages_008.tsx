/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/Models/New/Pages_008.glb --types 
*/

import * as THREE from "three";
import React, { useEffect, useRef, useState } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    Plane_008: THREE.Mesh;
    Plane_008_1: THREE.Mesh;
    Plane_011: THREE.Mesh;
    Plane_011_1: THREE.Mesh;
    Plane_009: THREE.Mesh;
    Plane_009_1: THREE.Mesh;
    Plane_010: THREE.Mesh;
    Plane_010_1: THREE.Mesh;
    Plane_012: THREE.Mesh;
    Plane_012_1: THREE.Mesh;
    Plane_013: THREE.Mesh;
    Plane_013_1: THREE.Mesh;
    Plane_014: THREE.Mesh;
    Plane_014_1: THREE.Mesh;
    Plane_015: THREE.Mesh;
    Plane_015_1: THREE.Mesh;
  };
  materials: {
    ["Opaline Paper"]: THREE.MeshStandardMaterial;
    White: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

type ActionName =
  | "Key.008Action"
  | "Key.011Action"
  | "Key.009Action"
  | "Key.010Action"
  | "Key.012Action"
  | "Key.013Action"
  | "Key.014Action"
  | "Key.015Action";
interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}

type propsBook = JSX.IntrinsicElements["group"] & {
  DiffuseMap: THREE.Texture;
  BumpMap: THREE.Texture;
  StartAnimation: Boolean;
  ImagesReady: Boolean;
  Textures: THREE.Texture[];
};

export function Pages_008(props: propsBook) {
  const group = useRef<THREE.Group>(null);
  const { nodes, materials, animations } = useGLTF(
    "/Models/New/Pages_008.glb"
  ) as GLTFResult;
  const { actions } = useAnimations(animations, group);

  const nd = Object.entries(nodes);
  const nodesArray = nd.filter((item) => {
    if (item[0].startsWith("Plane") && !item[0].endsWith("_1")) {
      return true;
    }
    return false;
  });
  materials["Opaline Paper"].color = new THREE.Color("white");
  materials["Opaline Paper"].map = props.DiffuseMap;
  materials["Opaline Paper"].map.flipY = false;
  materials["Opaline Paper"].needsUpdate = true;
  const materialsArray = new Array(8).fill(materials["Opaline Paper"]);
  const [Materials, setMaterials] =
    useState<THREE.MeshStandardMaterial[]>(materialsArray); // Assuming image exists by default

  useEffect(() => {
    if (props.ImagesReady && props.Textures) {
      const Pages = props.Textures;
      const mt: THREE.MeshStandardMaterial[] = [];
      Materials.map((material, index) => {
        const mat = material.clone();
        mat.map = Pages[index];
        mat.needsUpdate = true;
        mt.push(mat);
      });
      setMaterials(mt);
    } else {
      setMaterials(materialsArray);
    }
  }, [props.ImagesReady]);
  useEffect(() => {
    if (props.StartAnimation) {
      Object.entries(actions).map(([key, value]) => {
        value?.setLoop(THREE.LoopOnce, 0);
        value?.play().reset();
      });
    }
  }, [props.StartAnimation]);
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        {Materials.map((material, index) => {
          return (
            <mesh
              key={index}
              castShadow
              name={nodesArray[index][0]}
              geometry={nodesArray[index][1].geometry}
              material={material}
              morphTargetDictionary={nodesArray[index][1].morphTargetDictionary}
              morphTargetInfluences={nodesArray[index][1].morphTargetInfluences}
            />
          );
        })}
        <mesh
          name="Plane_008_1"
          geometry={nodes.Plane_008_1.geometry}
          material={materials.White}
          morphTargetDictionary={nodes.Plane_008_1.morphTargetDictionary}
          morphTargetInfluences={nodes.Plane_008_1.morphTargetInfluences}
        />
        <mesh
          name="Plane_011_1"
          geometry={nodes.Plane_011_1.geometry}
          material={materials.White}
          morphTargetDictionary={nodes.Plane_011_1.morphTargetDictionary}
          morphTargetInfluences={nodes.Plane_011_1.morphTargetInfluences}
        />
        <mesh
          name="Plane_009_1"
          geometry={nodes.Plane_009_1.geometry}
          material={materials.White}
          morphTargetDictionary={nodes.Plane_009_1.morphTargetDictionary}
          morphTargetInfluences={nodes.Plane_009_1.morphTargetInfluences}
        />
        <mesh
          name="Plane_010_1"
          geometry={nodes.Plane_010_1.geometry}
          material={materials.White}
          morphTargetDictionary={nodes.Plane_010_1.morphTargetDictionary}
          morphTargetInfluences={nodes.Plane_010_1.morphTargetInfluences}
        />
        <mesh
          name="Plane_012_1"
          geometry={nodes.Plane_012_1.geometry}
          material={materials.White}
          morphTargetDictionary={nodes.Plane_012_1.morphTargetDictionary}
          morphTargetInfluences={nodes.Plane_012_1.morphTargetInfluences}
        />
        <mesh
          name="Plane_013_1"
          geometry={nodes.Plane_013_1.geometry}
          material={materials.White}
          morphTargetDictionary={nodes.Plane_013_1.morphTargetDictionary}
          morphTargetInfluences={nodes.Plane_013_1.morphTargetInfluences}
        />
        <mesh
          name="Plane_014_1"
          geometry={nodes.Plane_014_1.geometry}
          material={materials.White}
          morphTargetDictionary={nodes.Plane_014_1.morphTargetDictionary}
          morphTargetInfluences={nodes.Plane_014_1.morphTargetInfluences}
        />
        <mesh
          name="Plane_015_1"
          geometry={nodes.Plane_015_1.geometry}
          material={materials.White}
          morphTargetDictionary={nodes.Plane_015_1.morphTargetDictionary}
          morphTargetInfluences={nodes.Plane_015_1.morphTargetInfluences}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/Models/New/Pages_008.glb");
