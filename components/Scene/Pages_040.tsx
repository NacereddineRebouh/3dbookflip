/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 Pages_040.glb --types --transform 
Files: Pages_040.glb [46.37MB] > C:\Users\Origin Systems\Desktop\Job\MyWork\work\3D BookFlip\bookflip\public\Models\Pages_040-transformed.glb [44.82MB] (3%)
*/

import * as THREE from "three";
import React, { useEffect, useRef, useState } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { GetTextures } from "./Pages_000";

type GLTFResult = GLTF & {
  nodes: {
    Pages_040: THREE.Mesh;
    Pages_041: THREE.Mesh;
    Pages_042: THREE.Mesh;
    Pages_043: THREE.Mesh;
    Pages_044: THREE.Mesh;
    Pages_045: THREE.Mesh;
    Pages_046: THREE.Mesh;
    Pages_047: THREE.Mesh;
  };
  materials: {
    ["Opaline Paper"]: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

type ActionName =
  | "Key.044Action"
  | "Key.045Action"
  | "Key.046Action"
  | "Key.047Action"
  | "Key.048Action"
  | "Key.049Action"
  | "Key.050Action"
  | "Key.051Action";
interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}
type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
>;

type propsBook = JSX.IntrinsicElements["group"] & {
  DiffuseMap: THREE.Texture;
  BumpMap: THREE.Texture;
  StartAnimation: Boolean;
  ImagesReady: Boolean;
};
export function Pages_040(props: propsBook) {
  const group = useRef<THREE.Group>(null);
  const { nodes, materials, animations } = useGLTF(
    "/Models/Transformed/Pages_040.glb"
  ) as GLTFResult;

  const nodesArray = Object.entries(nodes);
  materials["Opaline Paper"].needsUpdate = true;
  materials["Opaline Paper"].map = props.DiffuseMap;
  const materialsArray = new Array(8).fill(materials["Opaline Paper"]);
  const [Materials, setMaterials] =
    useState<THREE.MeshStandardMaterial[]>(materialsArray); // Assuming image exists by default

  const { actions } = useAnimations(animations, group);
  useEffect(() => {
    if (props.ImagesReady) {
      const Pages = GetTextures(nodesArray, 40);
      const mt: THREE.MeshStandardMaterial[] = [];
      Materials.map((material, index) => {
        const mat = material.clone();
        mat.map = Pages[index];
        mat.needsUpdate = true;
        mt.push(mat);
      });
      setMaterials(mt);
    } else {
      setMaterials(materialsArray);
    }
  }, [props.ImagesReady]);

  useEffect(() => {
    if (props.StartAnimation)
      Object.entries(actions).map(([key, value]) => {
        value?.setLoop(THREE.LoopOnce, 0);
        value?.play().reset();
      });
  }, [props.StartAnimation]);
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        {Materials.map((material, index) => {
          return (
            <mesh
              key={index}
              castShadow
              name={nodesArray[index + 1][0]}
              geometry={nodesArray[index + 1][1].geometry}
              material={material}
              morphTargetDictionary={
                nodesArray[index + 1][1].morphTargetDictionary
              }
              morphTargetInfluences={
                nodesArray[index + 1][1].morphTargetInfluences
              }
            />
          );
        })}
        {/* <mesh
          castShadow
          name="Pages_040"
          geometry={nodes.Pages_040.geometry}
          material={materials["Opaline Paper"]}
          morphTargetDictionary={nodes.Pages_040.morphTargetDictionary}
          morphTargetInfluences={nodes.Pages_040.morphTargetInfluences}
        />
        <mesh
          castShadow
          name="Pages_041"
          geometry={nodes.Pages_041.geometry}
          material={materials["Opaline Paper"]}
          morphTargetDictionary={nodes.Pages_041.morphTargetDictionary}
          morphTargetInfluences={nodes.Pages_041.morphTargetInfluences}
        />
        <mesh
          castShadow
          name="Pages_042"
          geometry={nodes.Pages_042.geometry}
          material={materials["Opaline Paper"]}
          morphTargetDictionary={nodes.Pages_042.morphTargetDictionary}
          morphTargetInfluences={nodes.Pages_042.morphTargetInfluences}
        />
        <mesh
          castShadow
          name="Pages_043"
          geometry={nodes.Pages_043.geometry}
          material={materials["Opaline Paper"]}
          morphTargetDictionary={nodes.Pages_043.morphTargetDictionary}
          morphTargetInfluences={nodes.Pages_043.morphTargetInfluences}
        />
        <mesh
          castShadow
          name="Pages_044"
          geometry={nodes.Pages_044.geometry}
          material={materials["Opaline Paper"]}
          morphTargetDictionary={nodes.Pages_044.morphTargetDictionary}
          morphTargetInfluences={nodes.Pages_044.morphTargetInfluences}
        />
        <mesh
          castShadow
          name="Pages_045"
          geometry={nodes.Pages_045.geometry}
          material={materials["Opaline Paper"]}
          morphTargetDictionary={nodes.Pages_045.morphTargetDictionary}
          morphTargetInfluences={nodes.Pages_045.morphTargetInfluences}
        />
        <mesh
          castShadow
          name="Pages_046"
          geometry={nodes.Pages_046.geometry}
          material={materials["Opaline Paper"]}
          morphTargetDictionary={nodes.Pages_046.morphTargetDictionary}
          morphTargetInfluences={nodes.Pages_046.morphTargetInfluences}
        />
        <mesh
          castShadow
          name="Pages_047"
          geometry={nodes.Pages_047.geometry}
          material={materials["Opaline Paper"]}
          morphTargetDictionary={nodes.Pages_047.morphTargetDictionary}
          morphTargetInfluences={nodes.Pages_047.morphTargetInfluences}
        /> */}
      </group>
    </group>
  );
}

//useGLTF.preload("/Models/Transformed/Pages_040.glb");
