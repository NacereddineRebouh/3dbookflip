/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/Models/New/Pages_024.glb --types 
*/

import * as THREE from "three";
import React, { useEffect, useRef, useState } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    Plane_025: THREE.Mesh;
    Plane_025_1: THREE.Mesh;
    Plane_024: THREE.Mesh;
    Plane_024_1: THREE.Mesh;
    Plane_026: THREE.Mesh;
    Plane_026_1: THREE.Mesh;
    Plane_027: THREE.Mesh;
    Plane_027_1: THREE.Mesh;
    Plane_028: THREE.Mesh;
    Plane_028_1: THREE.Mesh;
    Plane_029: THREE.Mesh;
    Plane_029_1: THREE.Mesh;
    Plane_030: THREE.Mesh;
    Plane_030_1: THREE.Mesh;
    Plane_031: THREE.Mesh;
    Plane_031_1: THREE.Mesh;
  };
  materials: {
    ["Opaline Paper"]: THREE.MeshStandardMaterial;
    White: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

type ActionName =
  | "Key.029Action"
  | "Key.027Action"
  | "Key.028Action"
  | "Key.024Action"
  | "Key.031Action"
  | "Key.025Action"
  | "Key.026Action"
  | "Key.030Action";
interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}
type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
>;
type propsBook = JSX.IntrinsicElements["group"] & {
  DiffuseMap: THREE.Texture;
  BumpMap: THREE.Texture;
  StartAnimation: boolean;
  ImagesReady: boolean;
  Textures: THREE.Texture[];
};

export function Pages_024(props: propsBook) {
  const group = useRef<THREE.Group>(null);
  const { nodes, materials, animations } = useGLTF(
    "/Models/New/Pages_024.glb"
  ) as GLTFResult;
  const { actions } = useAnimations(animations, group);

  const nd = Object.entries(nodes);
  const nodesArray = nd.filter((item) => {
    if (item[0].startsWith("Plane") && !item[0].endsWith("_1")) {
      return true;
    }
    return false;
  });
  nodesArray.sort((a, b) => a[0].localeCompare(b[0]));
  materials["Opaline Paper"].color = new THREE.Color("white");
  materials["Opaline Paper"].map = props.DiffuseMap;
  materials["Opaline Paper"].map.flipY = false;
  materials["Opaline Paper"].needsUpdate = true;
  const materialsArray = new Array(8).fill(materials["Opaline Paper"]);
  const [Materials, setMaterials] =
    useState<THREE.MeshStandardMaterial[]>(materialsArray); // Assuming image exists by default

  useEffect(() => {
    if (props.ImagesReady && props.Textures) {
      const Pages = props.Textures;
      const mt: THREE.MeshStandardMaterial[] = [];
      Materials.map((material, index) => {
        const mat = material.clone();
        mat.map = Pages[index];
        mat.needsUpdate = true;
        mt.push(mat);
      });
      setMaterials(mt);
    } else {
      setMaterials(materialsArray);
    }
  }, [props.ImagesReady]);
  useEffect(() => {
    if (props.StartAnimation) {
      Object.entries(actions).map(([key, value]) => {
        value?.setLoop(THREE.LoopOnce, 0);
        value?.play().reset();
      });
    }
  }, [props.StartAnimation]);
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        {Materials.map((material, index) => {
          return (
            <mesh
              key={index}
              castShadow
              name={nodesArray[index][0]}
              geometry={nodesArray[index][1].geometry}
              material={material}
              morphTargetDictionary={nodesArray[index][1].morphTargetDictionary}
              morphTargetInfluences={nodesArray[index][1].morphTargetInfluences}
            />
          );
        })}
        <mesh
          name="Plane_029_1"
          geometry={nodes.Plane_029_1.geometry}
          material={materials.White}
          morphTargetDictionary={nodes.Plane_029_1.morphTargetDictionary}
          morphTargetInfluences={nodes.Plane_029_1.morphTargetInfluences}
        />

        <mesh
          name="Plane_027_1"
          geometry={nodes.Plane_027_1.geometry}
          material={materials.White}
          morphTargetDictionary={nodes.Plane_027_1.morphTargetDictionary}
          morphTargetInfluences={nodes.Plane_027_1.morphTargetInfluences}
        />

        <mesh
          name="Plane_028_1"
          geometry={nodes.Plane_028_1.geometry}
          material={materials.White}
          morphTargetDictionary={nodes.Plane_028_1.morphTargetDictionary}
          morphTargetInfluences={nodes.Plane_028_1.morphTargetInfluences}
        />

        <mesh
          name="Plane_024_1"
          geometry={nodes.Plane_024_1.geometry}
          material={materials.White}
          morphTargetDictionary={nodes.Plane_024_1.morphTargetDictionary}
          morphTargetInfluences={nodes.Plane_024_1.morphTargetInfluences}
        />

        <mesh
          name="Plane_031_1"
          geometry={nodes.Plane_031_1.geometry}
          material={materials.White}
          morphTargetDictionary={nodes.Plane_031_1.morphTargetDictionary}
          morphTargetInfluences={nodes.Plane_031_1.morphTargetInfluences}
        />

        <mesh
          name="Plane_025_1"
          geometry={nodes.Plane_025_1.geometry}
          material={materials.White}
          morphTargetDictionary={nodes.Plane_025_1.morphTargetDictionary}
          morphTargetInfluences={nodes.Plane_025_1.morphTargetInfluences}
        />

        <mesh
          name="Plane_026_1"
          geometry={nodes.Plane_026_1.geometry}
          material={materials.White}
          morphTargetDictionary={nodes.Plane_026_1.morphTargetDictionary}
          morphTargetInfluences={nodes.Plane_026_1.morphTargetInfluences}
        />

        <mesh
          name="Plane_030_1"
          geometry={nodes.Plane_030_1.geometry}
          material={materials.White}
          morphTargetDictionary={nodes.Plane_030_1.morphTargetDictionary}
          morphTargetInfluences={nodes.Plane_030_1.morphTargetInfluences}
        />
      </group>
    </group>
  );
}

//useGLTF.preload("/Models/New/Pages_024.glb");
