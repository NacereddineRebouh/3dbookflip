/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 Book.glb --types --transform 
Files: Book.glb [42.25MB] > C:\Users\Origin Systems\Desktop\Job\MyWork\work\3D BookFlip\bookflip\public\Models\Book-transformed.glb [35.43MB] (16%)
*/

import * as THREE from "three";
import React, { useEffect, useRef } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { BufferGeometryUtils } from "three/examples/jsm/Addons.js";

type GLTFResult = GLTF & {
  nodes: {
    Book: THREE.Mesh;
  };
  materials: {
    Leather: THREE.MeshPhysicalMaterial;
  };
  animations: GLTFAction[];
};

type GLTFResult2 = GLTF & {
  nodes: {
    Book: THREE.Mesh;
  };
  materials: {};
};

type ActionName = "Key.053Action";
interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}
type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
>;

type propsBook = JSX.IntrinsicElements["group"] & {
  DiffuseMap: THREE.Texture;
  RoughnessMap: THREE.Texture;
  NormalMap: THREE.Texture;
  StartAnimation: Boolean;
  ImagesReady: Boolean;
};

export function Book(props: propsBook) {
  const group = useRef<THREE.Group>(null);
  const { nodes, materials, animations } = useGLTF(
    "/Models/Transformed/Book-transformed.glb"
  ) as GLTFResult;
  props.DiffuseMap.flipY = false;
  materials.Leather.map = props.DiffuseMap;
  materials.Leather.roughnessMap = props.RoughnessMap;
  materials.Leather.normalMap = props.NormalMap;
  nodes.Book.geometry.computeVertexNormals();
  const { actions } = useAnimations(animations, group);

  useEffect(() => {
    if (actions["Key.053Action"]) {
      if (props.StartAnimation) {
        actions["Key.053Action"]?.setLoop(THREE.LoopOnce, 0);
        actions["Key.053Action"]?.play().reset();
      }
    }
  }, [props.StartAnimation]);

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <mesh
          castShadow
          name="Book"
          geometry={nodes.Book.geometry}
          material={materials.Leather}
          morphTargetDictionary={nodes.Book.morphTargetDictionary}
          morphTargetInfluences={nodes.Book.morphTargetInfluences}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/Models/Transformed/Book-transformed.glb");
